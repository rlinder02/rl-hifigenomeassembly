/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:HIFI_QC:READ_LEN' {
        ext.args   = "-c fastx \'{print \"PacBio_HiFi,\" length(\$seq)}\'"
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.length.csv" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:HIFI_QC:ASSEMBLY_STATS' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.N50.txt" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:HIFI_QC:PLOT_READ_LEN' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.read.length.pdf" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:GENOME_ASSEMBLY:HIFIASM' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:GENOME_ASSEMBLY:ASSEMBLY_STATS2' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:GENOME_ASSEMBLY:FCS_FCSADAPTOR' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:GENOME_ASSEMBLY:RAGTAG' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:ASSEMBLY_QC:ASSEMBLY_SIZE' {
        ext.args   = "-c fastx \'{sum+=length(\$seq)}END{print sum}\'"
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.genome_size.csv" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:ASSEMBLY_QC:COV_TABLE' {
        ext.args   = { "-c fastx -v line=HIFI_${meta.id} \'{print line\",\"length(\$seq)\",\"length(\$seq)}\'" }
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.contig_lengths.csv" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:ASSEMBLY_QC:COV_TABLE_PLOT' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:ASSEMBLY_QC:BUSCO_BUSCO' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:ASSEMBLY_QC:BUSCO_GENERATEPLOT' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.busco_figure" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:SYNTENY:ALIGN_FOR_SYNTENY' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: 'RL_HIFIGENOMEASSEMBLY:ASSEMBLE:REPEATS:REPEAT_MASK' {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}" }
        //container = 'dfam/tetools:1.88.5'
    }

}
